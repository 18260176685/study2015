<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<context:annotation-config />
	<context:property-placeholder location="classpath:/config/persistence-mysql" />
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

	<!-- Liquibase Start-->
	<bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
		<property name="dataSource" ref="datasource" />
		<property name="changeLog" value="classpath:/db/db-changelog.xml" />
		<property name="contexts" value="test, production" />
	</bean>
	<!-- Liquibase End -->

	<bean id="datasource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.pass}" />
		<!-- 数据库连接池保持的最小连接数 -->
		<property name="minIdle" value="5" />
		<!-- 数据库连接池保持的最大连接数 -->
		<property name="maxIdle" value="30" />
		<!--
            当数据库连接因为某种原因断掉之后，再重新从连接池中拿另外一个连接时实际上这个连接可能
            已经无效，所以为了确保所拿到的连接全都有效需要在获取连接，返回连接以及连接空闲时进行
            有效性验证 下面3个设置为ture时进行验证，默认为false
         -->
		<!-- 取得连接时是否进行有效性验证 -->
		<property name="testOnBorrow" value="true" />
		<!-- 返回连接时是否进行有效性验证 -->
		<property name="testOnReturn" value="true" />
		<!-- 连接空闲时是否进行有效性验证 -->
		<property name="testWhileIdle" value="true" />
	</bean>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="datasource" />
		<!-- 注意：我用的是Annotation的方式配置的Hibernate，这里的property的name是annotatedClasses -->

		<property name="packagesToScan">
			<list>
				<value>com.lxiang.base.core.domain</value>
			</list>
		</property>

		<!-- 使用配置文件
		<property name="mappingLocations">
			<list>
				<value>classpath:com/jialin/entity/User.hbm.xml</value>
            </list>
        </property>
        -->

		<property name="hibernateProperties">
			<props>
				<!-- 设置Hibernate方言 -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 是否打印sql -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- 格式化sql -->
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- 是否自动更新表 -->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
				<!-- 最大抓取深度，如果为0，则关闭默认的外连接抓取。建议值为0-3 -->
				<prop key="hibernate.max_fetch_depth">1</prop>
				<!-- 用于生成有助于调试的注释信息，默认为关闭 -->
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
			</props>
		</property>
	</bean>

	<!-- 配置事务管理器 -->

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<!-- AOP切面声明事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式-->
			<tx:method name="save*" propagation="REQUIRED" />
			<!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式-->
			<tx:method name="update*" propagation="REQUIRED" />
			<!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式-->
			<tx:method name="add*" propagation="REQUIRED" />
			<!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式-->
			<tx:method name="delete*" propagation="REQUIRED" />
			<!-- 支持当前事务，如果当前没有事务，就以非事务方式执行。只读 -->
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<!-- 支持当前事务，如果当前没有事务，就以非事务方式执行。只读 -->
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>


	<!--
	<aop:config>
	  <aop:pointcut id="allManagerMethod"
			expression="execution(* com.jialin.service.*.*(..))" />
		<aop:advisor pointcut-ref="allManagerMethod" advice-ref="txadvice" />
	</aop:config>
    -->

</beans>
